# -*- coding: utf-8 -*-
"""Yammer_analysis project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NmFjobwj6SpS_ajpM_wG9qrevknYXS6v
"""

import pandas as pd

import plotly.express as px

weekly_active_user_df = pd.read_csv('/content/drive/MyDrive/yammer_project/weekly_active_user.csv')

new_client_df = pd.read_csv('/content/drive/MyDrive/yammer_project/alluser_Vs_activated.csv')
new_client_week_df = pd.read_csv('/content/drive/MyDrive/yammer_project/weekly_active_user_week.csv')

user_cohort_df = pd.read_csv('/content/drive/MyDrive/yammer_project/User_cohort_analysis.csv')
user_device = pd.read_csv('/content/drive/MyDrive/yammer_project/user_device.csv')
email_action = pd.read_csv('/content/drive/MyDrive/yammer_project/email_action.csv')
open_ct_rate = pd.read_csv('/content/drive/MyDrive/yammer_project/open_ct_rate.csv')

"""# Situation: WAU(Weekly Active User) Decrease"""

weekly_active_user_df

fig = px.line(weekly_active_user_df, x='week', y="weekly_active_user")

fig.update_traces(mode="markers+lines", hovertemplate=None)

fig.update_layout(hovermode="x unified")

fig.show()

"""# Signup users(daily)"""

new_client_df

#daily
fig = px.line(new_client_df, x='signup_date', y=new_client_df.columns, title = 'Signup users(day)')

fig.update_traces(mode="lines", hovertemplate=None)

fig.update_layout(hovermode="x unified")

fig.show()

#Signup users(weekly)

new_client_week_df

new_client_week_df['signup_users_WoW(%)'] = round(new_client_week_df['signup_users'].pct_change()*100, 2)

new_client_week_df['activated_users_WoW(%)'] = round(new_client_week_df['activated_users'].pct_change()*100, 2)

new_client_week_df.fillna(0)

fig = px.line(new_client_week_df, x='signup_date', y=['signup_users',	'activated_users'], title = 'Signup users(week)')

fig.update_traces(mode="markers+lines", hovertemplate=None)

fig.update_layout(hovermode="x unified")

fig.show()

"""# User Cohort Analysis"""

user_cohort_df.columns

user_cohort_df.drop(['Average age during week'], axis = 1, inplace = True)

user_cohort_df

fig = px.line(user_cohort_df, x='week', y=user_cohort_df.columns)

# Add markers to the lines
fig.update_traces(mode="markers+lines", hovertemplate=None)

# Set hover mode to 'x unified'
fig.update_layout(hovermode="x unified", title="User Cohort Analysis", xaxis_title="Week", yaxis_title="Number of Users")


fig.show()

"""# WAU by Device

"""

user_device

fig = px.line(user_device, x='week', y=user_device.columns)

fig.update_traces(mode="markers+lines", hovertemplate=None)

fig.update_layout(hovermode="x unified", title="Weekly Engagement by Device Type", xaxis_title="Week", yaxis_title="Number of Users")

fig.show()

#WAU by Device Week On Week change

# Calculate Week On Week change
device_pct_change_df = round(user_device[['weekly_active_users', 'computer', 'phone', 'tablet']].pct_change()*100, 2)


# Add the 'week' column back to the result
device_pct_change_df.insert(0, 'week', user_device['week'])

device_pct_change_df.fillna(0)

import seaborn as sns

# Function to highlight specific row
def highlight_row(s, row):
    return ['background-color: yellow' if s.name == row else '' for i in s]

# Apply the highlighting
highlighted_df = device_pct_change_df.style.apply(highlight_row, row=14, axis=1)

# To display the styled DataFrame in a Jupyter Notebook
highlighted_df

fig = px.line(device_pct_change_df, x='week', y=device_pct_change_df.columns)

fig.update_traces(mode="markers+lines", hovertemplate=None)

fig.update_layout(hovermode="x unified", title="WoW", xaxis_title="Week", yaxis_title="%")

fig.show()

"""# Email Action"""

#Week On Week change

# Calculate Week On Week change
email_pct_change_df = round(email_action[['email_clickthroughs']].pct_change()*100, 2)

email_action['email_clickthroughs_WoW(%)'] = email_pct_change_df

email_action.fillna(0)

def highlight_cell(val, data, row, col):
    color = 'lightgreen' if val == data.iloc[row, col] else ''
    return 'background-color: %s' % color

# Apply the highlighting to the specified row and column
email_action_highlighted_df = email_action.style.applymap(lambda x: highlight_cell(x, email_action, 14, -1))

email_action_highlighted_df



"""##Email Open Rate


"""

open_ct_rate

email_op_rate = pd.DataFrame()

email_op_rate['weekly_open_rate(%)'] = round(open_ct_rate['weekly_digest_email_open']/open_ct_rate['weekly_digest_email'], 2)*100

email_op_rate['weekly_click_rate(%)'] = round(open_ct_rate['weekly_digest_email_click_through']/open_ct_rate['weekly_digest_email_open'], 2)*100

email_op_rate['retain_open_rate(%)'] = round(open_ct_rate['retain_opens']/open_ct_rate['retain_emails'], 2)*100

email_op_rate['retain_click_rate(%)'] = round(open_ct_rate['retain_ctr']/open_ct_rate['retain_opens'], 2)*100

email_op_rate.insert(0, 'week', open_ct_rate['week'])

email_op_rate.fillna(0)

fig = px.line(email_op_rate, x='week', y=email_op_rate.columns)


fig.update_traces(mode="markers+lines", hovertemplate=None)

fig.update_layout(hovermode="x unified", title="Open And Click Rate", xaxis_title="Week", yaxis_title="%")

fig.show()